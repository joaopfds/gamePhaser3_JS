config = {
  type: Phaser.AUTO,
  parent: "phaser-example",
  width: 1320,
  height: 630,
  physics: {
    default: "arcade",
    arcade: {
      gravity: { y: 0 },
    },
  },
  scene: {
    preload: preload,
    create: create,
    update: update,
  },
};

const game = new Phaser.Game(config);
let player;
var ship;
var cursors;
let bullets;
var speed;
var stats;
var lastFired = 0;
var txtScore;
var camera;
var et;
var et3;

function preload() {
  this.load.image('tiles', 'assets/tileset (2).png');
  this.load.tilemapTiledJSON('map', 'assets/untitled.json');
  this.load.image('bullet', 'assets/shmup-bullet.png');
  this.load.spritesheet('hawk', 'assets/airfoce1.png', {
    frameWidth: 40,
    frameHeight: 60,
  });
  //this.load.spritesheet('ovni', 'assets/ovni2.png');
}

function create() {
  //add tileset/json
  var map = this.make.tilemap({ key: 'map' });
  var tileset = map.addTilesetImage('tileset (2)', 'tiles');
  // layers do mapa
  var ground = map.createStaticLayer("ground", tileset, 0, 0);
  //var ground2 = map.createDynamicLayer("abjectCollider", tileset, 0, 0);
  var ground3 = map.createStaticLayer("towers", tileset, 0, 0);
  var ground4 = map.createStaticLayer("towers1", tileset, 0, 0);
  var ground5 = map.createStaticLayer("objectcollider2", tileset, 0, 0);

  //player
  player = this.physics.add.sprite(300,300, "hawk");

  //colisoes
  var ground2 = map.createDynamicLayer("abjectCollider", tileset, 0, 0);
  collider.setCollisionByProperty({"ground2": true});   
  this.physics.add.collider(player, collider);
  player.setCollideWorldBounds(true);

  cursors = this.input.keyboard.createCursorKeys();
  cursorsFalse = this.input.keyboard.createCursorKeys();


}

function update () {
  player.body.setVelocity(0);
  player.body.acceleration.set(0);
  

  //cursors = this.input.keyboard.createCursorKeys();
  if (cursors.left.isDown) {
    player.body.setVelocityX(-250);
  } else if (cursors.right.isDown) {
    player.body.setVelocityX(250);
  } else if (cursors.up.isDown) {
    player.body.setVelocityY(-250);
  } else if (cursors.down.isDown) {
    player.body.setVelocityY(250);
  } 
  if (cursors.left.isDown && cursors.up.isDown ) {
    player.body.setVelocityX(-250);
    player.body.setVelocityY(-250);
  } else if (cursors.right.isDown && cursors.up.isDown) {
    player.body.setVelocityX(250);
    player.body.setVelocityY(-250);
  } else if (cursors.down.isDown && cursors.left.isDown) {
    player.body.setVelocityY(250);
    player.body.setVelocityX(-250);
  } else if (cursors.down.isDown && cursors.right.isDown ) {
    player.body.setVelocityY(250);
    player.body.setVelocityX(250);
  } else if (cursors.down.isDown && cursors.up.isDown ) {
    player.body.setVelocity(0);
  } else if (cursors.left.isDown && cursors.right.isDown ) {
    player.body.setVelocity(0);
  }

}




/*var config = {
  type: Phaser.AUTO,
  parent: "phaser-example",
  width: 1320,
  height: 630,
  physics: {
    default: "arcade",
    arcade: {
      gravity: { y: 0 },
    },
  },
  scene: {
    preload: preload,
    create: create,
    update: update,
  },
};

const game = new Phaser.Game(config);
let player;
var ship;
var cursors;
let bullets;
var speed;
var stats;
var lastFired = 0;
var txtScore;
var camera;
var et;
var et3;
function preload() {
  this.load.image('tiles', 'assets/tileset (2).png');
  this.load.image('ovni', 'assets/ovni2.png');
  this.load.tilemapTiledJSON('map', 'assets/untitled.json');
  this.load.image('bullet', 'assets/shmup-bullet.png');
  this.load.spritesheet('hawk', 'assets/airfoce1.png', {
    frameWidth: 40,
    frameHeight: 60,
  });
}

function create() {

  var map = this.make.tilemap({ key: 'map' });
  var tileset = map.addTilesetImage('tileset (2)', 'tiles');

  var ground = map.createStaticLayer("ground", tileset, 0, 0);
  var ground2 = map.createDynamicLayer("abjectCollider", tileset, 0, 0);
  var ground3 = map.createStaticLayer("towers", tileset, 0, 0);
  var ground4 = map.createStaticLayer("towers1", tileset, 0, 0);
  var ground5 = map.createStaticLayer("objectcollider2", tileset, 0, 0);


  //player = this.physics.add.sprite(300,300, "hawk");




  var Bullet = new Phaser.Class({

    Extends: Phaser.GameObjects.Image,

    initialize:

      function Bullet(scene) {
        Phaser.GameObjects.Image.call(this, scene, 0, 0, 'bullet');

        this.speed = Phaser.Math.GetSpeed(600, 1);
      },

    fire: function (x, y) {
      this.setPosition(x + 50, y);

      this.setActive(true);
      this.setVisible(true);
    },

    update: function (time, delta) {
      this.x += this.speed * delta;

      if (this.y < -10) {
        this.setActive(false);
        this.setVisible(false);
      }
    }

  });

  bullets = this.add.group({
    classType: Bullet,
    maxSize: Infinity,
    runChildUpdate: true
  });

  ship = this.add.sprite(400, 500, 'hawk').setDepth(1);

  et = this.add.image(1400, 300, "ovni");
  et2 = this.add.image(1900, 600, "ovni");

  cursors = this.input.keyboard.createCursorKeys();

  speed = Phaser.Math.GetSpeed(400, 1);


  camera = this.cameras.main;
  camera.startFollow(ship);
  camera.setBounds(0, 0, map.widthInPixels, map.heightInPixels);


  txtScore = this.add.text(50, 50, 'SCORE: 0', { fontSize: '50px', fill: '##d60606' });

  et3 = this.physics.add.group({
    key: 'ovni',
    repeat: 10,
    setXY: { x: 1200, y: 600, stepX: 700 }
  });

  et3.children.iterate(function (child) {

    child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));

  });

  this.physics.add.collider(et3, ground2);

  //this.physics.add.overlap(this.bullets, et3, kill, null, this);

}

function update(time, delta) {
  //player.body.setVelocity(0);
  //player.body.acceleration.set(0);
  

  cursors = this.input.keyboard.createCursorKeys();


  /*if (cursors.left.isDown) {
    ship.body.setVelocityX(-250);
  } else if (cursors.right.isDown) {
    ship.body.setVelocityX(250);
  } else if (cursors.up.isDown) {
    ship.body.setVelocityY(-250);
  } else if (cursors.down.isDown) {
    ship.body.setVelocityY(250);
  } 
  if (cursors.left.isDown && cursors.up.isDown ) {
    ship.body.setVelocityX(-250);
    ship.body.setVelocityY(-250);
  } else if (cursors.right.isDown && cursors.up.isDown) {
    ship.body.setVelocityX(250);
    ship.body.setVelocityY(-250);
  } else if (cursors.down.isDown && cursors.left.isDown) {
    ship.body.setVelocityY(250);
    ship.body.setVelocityX(-250);
  } else if (cursors.down.isDown && cursors.right.isDown ) {
    ship.body.setVelocityY(250);
    ship.body.setVelocityX(250);
  } else if (cursors.down.isDown && cursors.up.isDown ) {
    ship.body.setVelocity(0);
  } else if (cursors.left.isDown && cursors.right.isDown ) {
    ship.body.setVelocity(0);
  }
  if (cursors.left.isDown) {
    ship.x -= speed * delta;
  }
  else if (cursors.right.isDown) {
    ship.x += speed * delta;
  } else if (cursors.down.isDown) {
    ship.y += speed * delta;
  } else if (cursors.up.isDown) {
    ship.y -= speed * delta;
  }

  if (cursors.space.isDown && time > lastFired) {
    var bullet = bullets.get();

    if (bullet) {
      bullet.fire(ship.x, ship.y);

      lastFired = time + 250;
    }


  }

  txtScore.text = 'bullets: âˆž';

  function kill (bullets, et3)
  {
        et3.disableBody(true, true);
  }



  if (cursors.space.isDown) {
    //fire();
  }
}

function fire() {
  if (this.time.now > nextFire && bullets.countDead() > 0) {
    nextFire = this.time.now + fireRate;

    var bullet = bullets.getFirstDead();

    //bullet.reset(tank.x - 8, tank.y - 8);

    //game.physics.arcade.moveToPointer(bullet, 300);
    bullet.reset(player.x + 30, player.y + 5);
    // Give it a velocity of -500 so it starts shooting
    bullet.body.velocity.x = +200;
  }
}*/